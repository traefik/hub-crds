/*
The GNU AFFERO GENERAL PUBLIC LICENSE

Copyright (c) 2020-2024 Traefik Labs

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/traefik/hub-crds/pkg/apis/hub/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// APIRateLimitLister helps list APIRateLimits.
// All objects returned here must be treated as read-only.
type APIRateLimitLister interface {
	// List lists all APIRateLimits in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.APIRateLimit, err error)
	// Get retrieves the APIRateLimit from the index for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.APIRateLimit, error)
	APIRateLimitListerExpansion
}

// aPIRateLimitLister implements the APIRateLimitLister interface.
type aPIRateLimitLister struct {
	indexer cache.Indexer
}

// NewAPIRateLimitLister returns a new APIRateLimitLister.
func NewAPIRateLimitLister(indexer cache.Indexer) APIRateLimitLister {
	return &aPIRateLimitLister{indexer: indexer}
}

// List lists all APIRateLimits in the indexer.
func (s *aPIRateLimitLister) List(selector labels.Selector) (ret []*v1alpha1.APIRateLimit, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.APIRateLimit))
	})
	return ret, err
}

// Get retrieves the APIRateLimit from the index for a given name.
func (s *aPIRateLimitLister) Get(name string) (*v1alpha1.APIRateLimit, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("apiratelimit"), name)
	}
	return obj.(*v1alpha1.APIRateLimit), nil
}
